generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TrainingCategory {
  VISAS
  IMMIGRATION_LAW
  CUSTOMER_SERVICE
  TECHNOLOGY
  COMPLIANCE
  SAFETY
  OTHER
}

model ClientCase {
  id            Int        @id @default(autoincrement())
  clientName    String     @db.VarChar(255)
  caseType      String     @db.VarChar(100)
  notes         String?    @db.Text
  totalContract Decimal?   @db.Decimal(10, 2)
  paralegal     String?    @db.VarChar(100)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  status        String     @default("Active") @db.VarChar(50)
  caseNotes     CaseNote[]

  @@index([status], map: "idx_client_cases_status")
  @@map("client_cases")
}

model CaseNote {
  id           Int        @id @default(autoincrement())
  content      String     @db.Text
  createdAt    DateTime   @default(now())
  clientCaseId Int
  clientCase   ClientCase @relation(fields: [clientCaseId], references: [id], onDelete: Cascade)

  @@index([clientCaseId], map: "case_notes_clientCaseId_fkey")
  @@map("case_notes")
}

// User Management System
model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  position              String                  @db.VarChar(100)
  password              String                  @db.VarChar(255)
  role                  UserRole                @default(AGENT)
  isActive              Boolean                 @default(true)
  mustChangePassword    Boolean                 @default(true)
  lastLogin             DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // Profile Information
  address               String?                 @db.VarChar(500)
  country               String?                 @db.VarChar(100)
  personalPhone         String?                 @db.VarChar(20)
  emergencyPhone        String?                 @db.VarChar(20)
  emergencyContactName  String?                 @db.VarChar(255)
  profilePhoto          String?                 @db.VarChar(500)
  
  // Relations
  permissionRequests    PermissionRequest[]
  incidentReports       IncidentReport[]
  approvedPermissions   PermissionRequest[]     @relation("ApprovedByUser")
  authoredNews          News[]                  @relation("NewsAuthor")
  userFiles             UserFile[]              @relation("UserFiles")
  uploadedFiles         UserFile[]              @relation("FilesUploadedBy")
  
  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

// HR Module - Permission Requests
model PermissionRequest {
  id            Int                   @id @default(autoincrement())
  userId        Int
  requestType   PermissionType
  startDate     DateTime
  endDate       DateTime
  reason        String                @db.Text
  status        RequestStatus         @default(PENDING)
  approvedBy    Int?
  approvedAt    DateTime?
  rejectedReason String?              @db.Text
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  // Relations
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  approver      User?                 @relation("ApprovedByUser", fields: [approvedBy], references: [id])
  
  @@index([userId], map: "idx_permission_requests_user")
  @@index([status], map: "idx_permission_requests_status")
  @@map("permission_requests")
}

// HR Module - Incident Reports
model IncidentReport {
  id            Int                   @id @default(autoincrement())
  userId        Int
  title         String                @db.VarChar(255)
  description   String                @db.Text
  incidentType  IncidentType
  priority      Priority              @default(MEDIUM)
  imageUrl      String?               @db.LongText
  status        IncidentStatus        @default(OPEN)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  // Relations
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId], map: "idx_incident_reports_user")
  @@index([status], map: "idx_incident_reports_status")
  @@index([priority], map: "idx_incident_reports_priority")
  @@map("incident_reports")
}

// Training Module
model TrainingModule {
  id            Int                   @id @default(autoincrement())
  title         String                @db.VarChar(255)
  description   String?               @db.Text
  category      TrainingCategory
  content       String?               @db.LongText  // Now optional, content can be in items
  isActive      Boolean               @default(true)
  order         Int                   @default(0)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  // Relations
  contentItems  TrainingModuleContent[]
  
  @@index([isActive], map: "idx_training_modules_active")
  @@map("training_modules")
}

// Training Module Content Items
model TrainingModuleContent {
  id            Int                   @id @default(autoincrement())
  title         String                @db.VarChar(255)
  description   String?               @db.Text
  contentType   ContentType
  url           String?               @db.VarChar(500)   // For YouTube videos, documents, etc.
  fileData      String?               @db.LongText       // For uploaded files (Base64)
  fileName      String?               @db.VarChar(255)   // Original filename
  fileSize      Int?                  // File size in bytes
  order         Int                   @default(0)
  isActive      Boolean               @default(true)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  // Relations
  moduleId      Int
  module        TrainingModule        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@index([moduleId], map: "idx_training_content_module")
  @@index([order], map: "idx_training_content_order")
  @@index([isActive], map: "idx_training_content_active")
  @@map("training_module_content")
}

// Enums
enum UserRole {
  ADMIN
  AGENT
}

enum PermissionType {
  VACATION
  SICK_LEAVE
  PERSONAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  PTO
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum IncidentType {
  TECHNICAL
  WORKPLACE
  HARASSMENT
  SAFETY
  EQUIPMENT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContentType {
  VIDEO
  DOCUMENT
  TEXT
  LINK
  YOUTUBE
}

// News Management System
model News {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  imageUrl    String?   @db.LongText
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  authorId    Int
  author      User      @relation("NewsAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([isActive], map: "idx_news_active")
  @@index([createdAt], map: "idx_news_created")
  @@index([authorId], map: "idx_news_author")
  @@map("news")
}

// User Files Management System
model UserFile {
  id          Int       @id @default(autoincrement())
  fileName    String    @db.VarChar(255)
  fileUrl     String    @db.LongText
  fileType    String    @db.VarChar(100)
  fileSize    Int       // Size in bytes
  description String?   @db.VarChar(500)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      Int
  user        User      @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)
  uploadedById Int?     // Who uploaded the file (admin can upload for others)
  uploadedBy  User?     @relation("FilesUploadedBy", fields: [uploadedById], references: [id])
  
  @@index([userId], map: "idx_user_files_user")
  @@index([createdAt], map: "idx_user_files_created")
  @@map("user_files")
}

// Paralegal Management System
model Paralegal {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([isActive], map: "idx_paralegals_active")
  @@index([name], map: "idx_paralegals_name")
  @@map("paralegals")
}
